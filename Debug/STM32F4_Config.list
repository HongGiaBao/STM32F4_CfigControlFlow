
STM32F4_Config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f78  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002100  08002100  00003100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002110  08002110  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002110  08002110  00003110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002118  08002118  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002118  08002118  00003118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800211c  0800211c  0000311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002120  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          0000077c  20000010  20000010  00004010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000078c  2000078c  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004be9  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001684  00000000  00000000  00008c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  0000a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000409  00000000  00000000  0000a868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002114d  00000000  00000000  0000ac71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e81  00000000  00000000  0002bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c08ca  00000000  00000000  00035c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f6509  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013d4  00000000  00000000  000f654c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000f7920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020e8 	.word	0x080020e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080020e8 	.word	0x080020e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_uldivmod>:
 8000540:	b953      	cbnz	r3, 8000558 <__aeabi_uldivmod+0x18>
 8000542:	b94a      	cbnz	r2, 8000558 <__aeabi_uldivmod+0x18>
 8000544:	2900      	cmp	r1, #0
 8000546:	bf08      	it	eq
 8000548:	2800      	cmpeq	r0, #0
 800054a:	bf1c      	itt	ne
 800054c:	f04f 31ff 	movne.w	r1, #4294967295
 8000550:	f04f 30ff 	movne.w	r0, #4294967295
 8000554:	f000 b988 	b.w	8000868 <__aeabi_idiv0>
 8000558:	f1ad 0c08 	sub.w	ip, sp, #8
 800055c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000560:	f000 f806 	bl	8000570 <__udivmoddi4>
 8000564:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800056c:	b004      	add	sp, #16
 800056e:	4770      	bx	lr

08000570 <__udivmoddi4>:
 8000570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000574:	9d08      	ldr	r5, [sp, #32]
 8000576:	468e      	mov	lr, r1
 8000578:	4604      	mov	r4, r0
 800057a:	4688      	mov	r8, r1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d14a      	bne.n	8000616 <__udivmoddi4+0xa6>
 8000580:	428a      	cmp	r2, r1
 8000582:	4617      	mov	r7, r2
 8000584:	d962      	bls.n	800064c <__udivmoddi4+0xdc>
 8000586:	fab2 f682 	clz	r6, r2
 800058a:	b14e      	cbz	r6, 80005a0 <__udivmoddi4+0x30>
 800058c:	f1c6 0320 	rsb	r3, r6, #32
 8000590:	fa01 f806 	lsl.w	r8, r1, r6
 8000594:	fa20 f303 	lsr.w	r3, r0, r3
 8000598:	40b7      	lsls	r7, r6
 800059a:	ea43 0808 	orr.w	r8, r3, r8
 800059e:	40b4      	lsls	r4, r6
 80005a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a4:	fa1f fc87 	uxth.w	ip, r7
 80005a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80005b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005b6:	fb01 f20c 	mul.w	r2, r1, ip
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d909      	bls.n	80005d2 <__udivmoddi4+0x62>
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80005c4:	f080 80ea 	bcs.w	800079c <__udivmoddi4+0x22c>
 80005c8:	429a      	cmp	r2, r3
 80005ca:	f240 80e7 	bls.w	800079c <__udivmoddi4+0x22c>
 80005ce:	3902      	subs	r1, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	1a9a      	subs	r2, r3, r2
 80005d4:	b2a3      	uxth	r3, r4
 80005d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80005da:	fb0e 2210 	mls	r2, lr, r0, r2
 80005de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80005e6:	459c      	cmp	ip, r3
 80005e8:	d909      	bls.n	80005fe <__udivmoddi4+0x8e>
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80005f0:	f080 80d6 	bcs.w	80007a0 <__udivmoddi4+0x230>
 80005f4:	459c      	cmp	ip, r3
 80005f6:	f240 80d3 	bls.w	80007a0 <__udivmoddi4+0x230>
 80005fa:	443b      	add	r3, r7
 80005fc:	3802      	subs	r0, #2
 80005fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000602:	eba3 030c 	sub.w	r3, r3, ip
 8000606:	2100      	movs	r1, #0
 8000608:	b11d      	cbz	r5, 8000612 <__udivmoddi4+0xa2>
 800060a:	40f3      	lsrs	r3, r6
 800060c:	2200      	movs	r2, #0
 800060e:	e9c5 3200 	strd	r3, r2, [r5]
 8000612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000616:	428b      	cmp	r3, r1
 8000618:	d905      	bls.n	8000626 <__udivmoddi4+0xb6>
 800061a:	b10d      	cbz	r5, 8000620 <__udivmoddi4+0xb0>
 800061c:	e9c5 0100 	strd	r0, r1, [r5]
 8000620:	2100      	movs	r1, #0
 8000622:	4608      	mov	r0, r1
 8000624:	e7f5      	b.n	8000612 <__udivmoddi4+0xa2>
 8000626:	fab3 f183 	clz	r1, r3
 800062a:	2900      	cmp	r1, #0
 800062c:	d146      	bne.n	80006bc <__udivmoddi4+0x14c>
 800062e:	4573      	cmp	r3, lr
 8000630:	d302      	bcc.n	8000638 <__udivmoddi4+0xc8>
 8000632:	4282      	cmp	r2, r0
 8000634:	f200 8105 	bhi.w	8000842 <__udivmoddi4+0x2d2>
 8000638:	1a84      	subs	r4, r0, r2
 800063a:	eb6e 0203 	sbc.w	r2, lr, r3
 800063e:	2001      	movs	r0, #1
 8000640:	4690      	mov	r8, r2
 8000642:	2d00      	cmp	r5, #0
 8000644:	d0e5      	beq.n	8000612 <__udivmoddi4+0xa2>
 8000646:	e9c5 4800 	strd	r4, r8, [r5]
 800064a:	e7e2      	b.n	8000612 <__udivmoddi4+0xa2>
 800064c:	2a00      	cmp	r2, #0
 800064e:	f000 8090 	beq.w	8000772 <__udivmoddi4+0x202>
 8000652:	fab2 f682 	clz	r6, r2
 8000656:	2e00      	cmp	r6, #0
 8000658:	f040 80a4 	bne.w	80007a4 <__udivmoddi4+0x234>
 800065c:	1a8a      	subs	r2, r1, r2
 800065e:	0c03      	lsrs	r3, r0, #16
 8000660:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000664:	b280      	uxth	r0, r0
 8000666:	b2bc      	uxth	r4, r7
 8000668:	2101      	movs	r1, #1
 800066a:	fbb2 fcfe 	udiv	ip, r2, lr
 800066e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000676:	fb04 f20c 	mul.w	r2, r4, ip
 800067a:	429a      	cmp	r2, r3
 800067c:	d907      	bls.n	800068e <__udivmoddi4+0x11e>
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000684:	d202      	bcs.n	800068c <__udivmoddi4+0x11c>
 8000686:	429a      	cmp	r2, r3
 8000688:	f200 80e0 	bhi.w	800084c <__udivmoddi4+0x2dc>
 800068c:	46c4      	mov	ip, r8
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	fbb3 f2fe 	udiv	r2, r3, lr
 8000694:	fb0e 3312 	mls	r3, lr, r2, r3
 8000698:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800069c:	fb02 f404 	mul.w	r4, r2, r4
 80006a0:	429c      	cmp	r4, r3
 80006a2:	d907      	bls.n	80006b4 <__udivmoddi4+0x144>
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80006aa:	d202      	bcs.n	80006b2 <__udivmoddi4+0x142>
 80006ac:	429c      	cmp	r4, r3
 80006ae:	f200 80ca 	bhi.w	8000846 <__udivmoddi4+0x2d6>
 80006b2:	4602      	mov	r2, r0
 80006b4:	1b1b      	subs	r3, r3, r4
 80006b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80006ba:	e7a5      	b.n	8000608 <__udivmoddi4+0x98>
 80006bc:	f1c1 0620 	rsb	r6, r1, #32
 80006c0:	408b      	lsls	r3, r1
 80006c2:	fa22 f706 	lsr.w	r7, r2, r6
 80006c6:	431f      	orrs	r7, r3
 80006c8:	fa0e f401 	lsl.w	r4, lr, r1
 80006cc:	fa20 f306 	lsr.w	r3, r0, r6
 80006d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80006d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80006d8:	4323      	orrs	r3, r4
 80006da:	fa00 f801 	lsl.w	r8, r0, r1
 80006de:	fa1f fc87 	uxth.w	ip, r7
 80006e2:	fbbe f0f9 	udiv	r0, lr, r9
 80006e6:	0c1c      	lsrs	r4, r3, #16
 80006e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80006ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80006f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80006f4:	45a6      	cmp	lr, r4
 80006f6:	fa02 f201 	lsl.w	r2, r2, r1
 80006fa:	d909      	bls.n	8000710 <__udivmoddi4+0x1a0>
 80006fc:	193c      	adds	r4, r7, r4
 80006fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000702:	f080 809c 	bcs.w	800083e <__udivmoddi4+0x2ce>
 8000706:	45a6      	cmp	lr, r4
 8000708:	f240 8099 	bls.w	800083e <__udivmoddi4+0x2ce>
 800070c:	3802      	subs	r0, #2
 800070e:	443c      	add	r4, r7
 8000710:	eba4 040e 	sub.w	r4, r4, lr
 8000714:	fa1f fe83 	uxth.w	lr, r3
 8000718:	fbb4 f3f9 	udiv	r3, r4, r9
 800071c:	fb09 4413 	mls	r4, r9, r3, r4
 8000720:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000724:	fb03 fc0c 	mul.w	ip, r3, ip
 8000728:	45a4      	cmp	ip, r4
 800072a:	d908      	bls.n	800073e <__udivmoddi4+0x1ce>
 800072c:	193c      	adds	r4, r7, r4
 800072e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000732:	f080 8082 	bcs.w	800083a <__udivmoddi4+0x2ca>
 8000736:	45a4      	cmp	ip, r4
 8000738:	d97f      	bls.n	800083a <__udivmoddi4+0x2ca>
 800073a:	3b02      	subs	r3, #2
 800073c:	443c      	add	r4, r7
 800073e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000742:	eba4 040c 	sub.w	r4, r4, ip
 8000746:	fba0 ec02 	umull	lr, ip, r0, r2
 800074a:	4564      	cmp	r4, ip
 800074c:	4673      	mov	r3, lr
 800074e:	46e1      	mov	r9, ip
 8000750:	d362      	bcc.n	8000818 <__udivmoddi4+0x2a8>
 8000752:	d05f      	beq.n	8000814 <__udivmoddi4+0x2a4>
 8000754:	b15d      	cbz	r5, 800076e <__udivmoddi4+0x1fe>
 8000756:	ebb8 0203 	subs.w	r2, r8, r3
 800075a:	eb64 0409 	sbc.w	r4, r4, r9
 800075e:	fa04 f606 	lsl.w	r6, r4, r6
 8000762:	fa22 f301 	lsr.w	r3, r2, r1
 8000766:	431e      	orrs	r6, r3
 8000768:	40cc      	lsrs	r4, r1
 800076a:	e9c5 6400 	strd	r6, r4, [r5]
 800076e:	2100      	movs	r1, #0
 8000770:	e74f      	b.n	8000612 <__udivmoddi4+0xa2>
 8000772:	fbb1 fcf2 	udiv	ip, r1, r2
 8000776:	0c01      	lsrs	r1, r0, #16
 8000778:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800077c:	b280      	uxth	r0, r0
 800077e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000782:	463b      	mov	r3, r7
 8000784:	4638      	mov	r0, r7
 8000786:	463c      	mov	r4, r7
 8000788:	46b8      	mov	r8, r7
 800078a:	46be      	mov	lr, r7
 800078c:	2620      	movs	r6, #32
 800078e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000792:	eba2 0208 	sub.w	r2, r2, r8
 8000796:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800079a:	e766      	b.n	800066a <__udivmoddi4+0xfa>
 800079c:	4601      	mov	r1, r0
 800079e:	e718      	b.n	80005d2 <__udivmoddi4+0x62>
 80007a0:	4610      	mov	r0, r2
 80007a2:	e72c      	b.n	80005fe <__udivmoddi4+0x8e>
 80007a4:	f1c6 0220 	rsb	r2, r6, #32
 80007a8:	fa2e f302 	lsr.w	r3, lr, r2
 80007ac:	40b7      	lsls	r7, r6
 80007ae:	40b1      	lsls	r1, r6
 80007b0:	fa20 f202 	lsr.w	r2, r0, r2
 80007b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b8:	430a      	orrs	r2, r1
 80007ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80007be:	b2bc      	uxth	r4, r7
 80007c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80007c4:	0c11      	lsrs	r1, r2, #16
 80007c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007ca:	fb08 f904 	mul.w	r9, r8, r4
 80007ce:	40b0      	lsls	r0, r6
 80007d0:	4589      	cmp	r9, r1
 80007d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80007d6:	b280      	uxth	r0, r0
 80007d8:	d93e      	bls.n	8000858 <__udivmoddi4+0x2e8>
 80007da:	1879      	adds	r1, r7, r1
 80007dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80007e0:	d201      	bcs.n	80007e6 <__udivmoddi4+0x276>
 80007e2:	4589      	cmp	r9, r1
 80007e4:	d81f      	bhi.n	8000826 <__udivmoddi4+0x2b6>
 80007e6:	eba1 0109 	sub.w	r1, r1, r9
 80007ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80007ee:	fb09 f804 	mul.w	r8, r9, r4
 80007f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80007f6:	b292      	uxth	r2, r2
 80007f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007fc:	4542      	cmp	r2, r8
 80007fe:	d229      	bcs.n	8000854 <__udivmoddi4+0x2e4>
 8000800:	18ba      	adds	r2, r7, r2
 8000802:	f109 31ff 	add.w	r1, r9, #4294967295
 8000806:	d2c4      	bcs.n	8000792 <__udivmoddi4+0x222>
 8000808:	4542      	cmp	r2, r8
 800080a:	d2c2      	bcs.n	8000792 <__udivmoddi4+0x222>
 800080c:	f1a9 0102 	sub.w	r1, r9, #2
 8000810:	443a      	add	r2, r7
 8000812:	e7be      	b.n	8000792 <__udivmoddi4+0x222>
 8000814:	45f0      	cmp	r8, lr
 8000816:	d29d      	bcs.n	8000754 <__udivmoddi4+0x1e4>
 8000818:	ebbe 0302 	subs.w	r3, lr, r2
 800081c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000820:	3801      	subs	r0, #1
 8000822:	46e1      	mov	r9, ip
 8000824:	e796      	b.n	8000754 <__udivmoddi4+0x1e4>
 8000826:	eba7 0909 	sub.w	r9, r7, r9
 800082a:	4449      	add	r1, r9
 800082c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000830:	fbb1 f9fe 	udiv	r9, r1, lr
 8000834:	fb09 f804 	mul.w	r8, r9, r4
 8000838:	e7db      	b.n	80007f2 <__udivmoddi4+0x282>
 800083a:	4673      	mov	r3, lr
 800083c:	e77f      	b.n	800073e <__udivmoddi4+0x1ce>
 800083e:	4650      	mov	r0, sl
 8000840:	e766      	b.n	8000710 <__udivmoddi4+0x1a0>
 8000842:	4608      	mov	r0, r1
 8000844:	e6fd      	b.n	8000642 <__udivmoddi4+0xd2>
 8000846:	443b      	add	r3, r7
 8000848:	3a02      	subs	r2, #2
 800084a:	e733      	b.n	80006b4 <__udivmoddi4+0x144>
 800084c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000850:	443b      	add	r3, r7
 8000852:	e71c      	b.n	800068e <__udivmoddi4+0x11e>
 8000854:	4649      	mov	r1, r9
 8000856:	e79c      	b.n	8000792 <__udivmoddi4+0x222>
 8000858:	eba1 0109 	sub.w	r1, r1, r9
 800085c:	46c4      	mov	ip, r8
 800085e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000862:	fb09 f804 	mul.w	r8, r9, r4
 8000866:	e7c4      	b.n	80007f2 <__udivmoddi4+0x282>

08000868 <__aeabi_idiv0>:
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <sendData>:
 *      Author: baohg1
 */
#include "control.h"

void sendData(uint16_t data)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	uint8_t checksum = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	75fb      	strb	r3, [r7, #23]
	uint8_t dataSend[4];
	uint8_t length = sizeof(dataSend) / sizeof(dataSend[0]);
 800087a:	2304      	movs	r3, #4
 800087c:	74fb      	strb	r3, [r7, #19]

	dataSend[0] = 0xB6;
 800087e:	23b6      	movs	r3, #182	@ 0xb6
 8000880:	733b      	strb	r3, [r7, #12]
	dataSend[1] = (data >> 8) & 0xFF;
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	737b      	strb	r3, [r7, #13]
	dataSend[2] = data & 0xFF;
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	73bb      	strb	r3, [r7, #14]

	uint16_t count = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	82bb      	strh	r3, [r7, #20]
	for(count = 0; count < length-1; count++)
 8000896:	2300      	movs	r3, #0
 8000898:	82bb      	strh	r3, [r7, #20]
 800089a:	e00a      	b.n	80008b2 <sendData+0x46>
	{
		checksum = checksum + dataSend[count];
 800089c:	8abb      	ldrh	r3, [r7, #20]
 800089e:	3318      	adds	r3, #24
 80008a0:	443b      	add	r3, r7
 80008a2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	4413      	add	r3, r2
 80008aa:	75fb      	strb	r3, [r7, #23]
	for(count = 0; count < length-1; count++)
 80008ac:	8abb      	ldrh	r3, [r7, #20]
 80008ae:	3301      	adds	r3, #1
 80008b0:	82bb      	strh	r3, [r7, #20]
 80008b2:	8aba      	ldrh	r2, [r7, #20]
 80008b4:	7cfb      	ldrb	r3, [r7, #19]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbef      	blt.n	800089c <sendData+0x30>
	}
	dataSend[3] = checksum;
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	73fb      	strb	r3, [r7, #15]
	USART2_Transmit(dataSend, length);
 80008c0:	7cfb      	ldrb	r3, [r7, #19]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f9b4 	bl	8000c38 <USART2_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <ControlTasks>:

void ControlTasks(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	uint16_t pan = 5000;
 80008de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008e2:	80fb      	strh	r3, [r7, #6]
	if(trigger_timer2 == true)
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <ControlTasks+0x38>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d00c      	beq.n	8000906 <ControlTasks+0x2e>
	{
		sendData(pan);
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffbc 	bl	800086c <sendData>
		trigger_timer2 = 0;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <ControlTasks+0x38>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
		GPIOD->ODR 			^= (0x1 << 12);
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <ControlTasks+0x3c>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <ControlTasks+0x3c>)
 8000900:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8000904:	6153      	str	r3, [r2, #20]
	}
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000658 	.word	0x20000658
 8000914:	40020c00 	.word	0x40020c00

08000918 <RunSystemTasks>:
{
	appState = INITIALIZE_APP;
}

void RunSystemTasks(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	switch(appState)
 800091c:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <RunSystemTasks+0x80>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d836      	bhi.n	8000992 <RunSystemTasks+0x7a>
 8000924:	a201      	add	r2, pc, #4	@ (adr r2, 800092c <RunSystemTasks+0x14>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	08000941 	.word	0x08000941
 8000930:	0800095f 	.word	0x0800095f
 8000934:	0800096b 	.word	0x0800096b
 8000938:	08000977 	.word	0x08000977
 800093c:	0800097f 	.word	0x0800097f
	{
		case INITIALIZE_APP:
			if(IsInputSignalPresent() == SIGNAL_PRESENT)
 8000940:	f000 f82e 	bl	80009a0 <IsInputSignalPresent>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d105      	bne.n	8000956 <RunSystemTasks+0x3e>
			{
				PreprocessData();
 800094a:	f000 f83b 	bl	80009c4 <PreprocessData>
				appState = PROCESS_CMD_APP;
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <RunSystemTasks+0x80>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
				break;
 8000954:	e01e      	b.n	8000994 <RunSystemTasks+0x7c>
			}
			appState = MOTOR_CONTROL_APP;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <RunSystemTasks+0x80>)
 8000958:	2204      	movs	r2, #4
 800095a:	701a      	strb	r2, [r3, #0]
			break;
 800095c:	e01a      	b.n	8000994 <RunSystemTasks+0x7c>
		case PROCESS_CMD_APP:
			ProcessCommand();
 800095e:	f000 f837 	bl	80009d0 <ProcessCommand>
			appState = EXECUTE_CMD_APP;
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <RunSystemTasks+0x80>)
 8000964:	2202      	movs	r2, #2
 8000966:	701a      	strb	r2, [r3, #0]
			break;
 8000968:	e014      	b.n	8000994 <RunSystemTasks+0x7c>
		case EXECUTE_CMD_APP:
			ExecuteCommand();
 800096a:	f000 f838 	bl	80009de <ExecuteCommand>
			appState = PROCESS_FEEDBACK_APP;
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <RunSystemTasks+0x80>)
 8000970:	2203      	movs	r2, #3
 8000972:	701a      	strb	r2, [r3, #0]
			break;
 8000974:	e00e      	b.n	8000994 <RunSystemTasks+0x7c>
		case PROCESS_FEEDBACK_APP:
			appState = MOTOR_CONTROL_APP;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <RunSystemTasks+0x80>)
 8000978:	2204      	movs	r2, #4
 800097a:	701a      	strb	r2, [r3, #0]
			break;
 800097c:	e00a      	b.n	8000994 <RunSystemTasks+0x7c>
		case MOTOR_CONTROL_APP:
			if(isSystemReady == true)
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <RunSystemTasks+0x84>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <RunSystemTasks+0x72>
			{
				//Run control tasks ...
				ControlTasks();
 8000986:	f7ff ffa7 	bl	80008d8 <ControlTasks>
			}
			appState = INITIALIZE_APP;
 800098a:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <RunSystemTasks+0x80>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
			break;
 8000990:	e000      	b.n	8000994 <RunSystemTasks+0x7c>
		default:
			break;
 8000992:	bf00      	nop
	}
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000002c 	.word	0x2000002c
 800099c:	20000000 	.word	0x20000000

080009a0 <IsInputSignalPresent>:

SignalStatus IsInputSignalPresent(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	if(SCI2buffer.flag == 1)
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <IsInputSignalPresent+0x20>)
 80009a6:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <IsInputSignalPresent+0x12>
	{
		return SIGNAL_PRESENT;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <IsInputSignalPresent+0x14>
	}
	else
		return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000448 	.word	0x20000448

080009c4 <PreprocessData>:

void PreprocessData()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
//	preProcessUSART1();
	preProcessUSART2();
 80009c8:	f000 f810 	bl	80009ec <preProcessUSART2>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <ProcessCommand>:

void ProcessCommand()
{}
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <ExecuteCommand>:

void ExecuteCommand()
{}
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <preProcessUSART2>:
	}
}


void preProcessUSART2(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	if(SCI2buffer.flag == 1)
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <preProcessUSART2+0x28>)
 80009f2:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00a      	beq.n	8000a10 <preProcessUSART2+0x24>
	{
		DrvSciRcv = SCI2buffer;
 80009fa:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <preProcessUSART2+0x2c>)
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <preProcessUSART2+0x28>)
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000a06:	461a      	mov	r2, r3
 8000a08:	f001 fb60 	bl	80020cc <memcpy>
		InitBufferSci2();
 8000a0c:	f000 f8ca 	bl	8000ba4 <InitBufferSci2>
	}
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000448 	.word	0x20000448
 8000a18:	20000030 	.word	0x20000030

08000a1c <InitDigitalGPIO>:
 */
#include "drv_digitalGpio.h"


void InitDigitalGPIO(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	// Configure PD12 as output
	GPIOD->MODER 		&= ~(0x3 << 24);  	// Clear bits 0-1
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a16      	ldr	r2, [pc, #88]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a26:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000a2a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER 		|= (0x1 << 24);   	// Set PD12 as output
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a36:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER 	&= ~(0x1 << 12); 		// Set push-pull
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a10      	ldr	r2, [pc, #64]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a42:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR 	&= ~(0x3 << 24); 		// Clear bits 0-1
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a4a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000a4e:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR 	|= (0x2 << 24);  		// Set high speed
 8000a50:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5a:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR 		&= ~(0x3 << 0);   	// No pull-up/pull-down
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a62:	f023 0303 	bic.w	r3, r3, #3
 8000a66:	60d3      	str	r3, [r2, #12]
	GPIOD->ODR 			|= (0x1 << 12);     // Set PD12 high initially
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <InitDigitalGPIO+0x64>)
 8000a6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a72:	6153      	str	r3, [r2, #20]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	@ (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <InitSciGPIO>:
_SCIbuffer SCI2buffer;
_SCIbuffer SCI3buffer;

/*Init GPIOs for SCI (UART) interface */
void InitSciGPIO(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
//	InitSci1Gpio();
	InitSci2Gpio();
 8000ac4:	f000 f802 	bl	8000acc <InitSci2Gpio>
//	InitSci3Gpio();
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <InitSci2Gpio>:
}


/*Init GPIOs for SCI2 */
void InitSci2Gpio(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	// 2. Configure PA2 (TX) and PA3 (RX) as Alternate Function (AF7)
	GPIOA->MODER &= ~((0x3 << (2*2)) | (0x3 << (2*3)));  // Clear MODER2, MODER3
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ada:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  ((0x2 << (2*2)) | (0x2 << (2*3)));  // Set AF mode (10)
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000ae2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000ae6:	6013      	str	r3, [r2, #0]

	// 3. Configure output type as Push-Pull
	GPIOA->OTYPER &= ~((1 << 2) | (1 << 3));             // 0 = Push-Pull
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000aee:	f023 030c 	bic.w	r3, r3, #12
 8000af2:	6053      	str	r3, [r2, #4]

	// 4. Configure speed as High speed
	GPIOA->OSPEEDR &= ~((0x3 << (2*2)) | (0x3 << (2*3)));
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4a13      	ldr	r2, [pc, #76]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000afe:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=  ((0x2 << (2*2)) | (0x2 << (2*3))); // 10 = High speed
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4a10      	ldr	r2, [pc, #64]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b06:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000b0a:	6093      	str	r3, [r2, #8]

	// 5. Configure Pull-up/Pull-down
	// TX: No pull; RX: Pull-Up để tránh floating line
	GPIOA->PUPDR &= ~((0x3 << (2*2)) | (0x3 << (2*3)));
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b16:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x1 << (2*3));                     // PA3 = Pull-Up
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b22:	60d3      	str	r3, [r2, #12]

	// 6. Select Alternate Function = AF7 (USART2) cho PA2/PA3
	GPIOA->AFR[0] &= ~((0xF << (4*2)) | (0xF << (4*3))); // Clear AFRL2, AFRL3
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b2e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  ((0x7 << (4*2)) | (0x7 << (4*3))); // AF7 = USART2
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <InitSci2Gpio+0x7c>)
 8000b36:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000b3a:	6213      	str	r3, [r2, #32]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40020000 	.word	0x40020000

08000b4c <InitSciModules>:
}


/*Init SCI Modules */
void InitSciModules(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
//	InitSci1();
//	InitBufferSci1();
	InitSci2();
 8000b50:	f000 f804 	bl	8000b5c <InitSci2>
	InitBufferSci2();
 8000b54:	f000 f826 	bl	8000ba4 <InitBufferSci2>
//	InitSci3();
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <InitSci2>:
}


/*Init Sci2 Modules*/
void InitSci2(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	// fclk = 42 MHz (APB1)
	// Baudrate = 115200 bps
	// USARTDIV = 42MHz / (16 * 115200) = 22.786 -> BRR = 0x16D
	USART2->BRR = 0x16D;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <InitSci2+0x44>)
 8000b62:	f240 126d 	movw	r2, #365	@ 0x16d
 8000b66:	609a      	str	r2, [r3, #8]

	// Clear status register
	USART2->SR = 0;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <InitSci2+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]

	// CR1/CR2/CR3 reset
	USART2->CR1 = 0;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <InitSci2+0x44>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <InitSci2+0x44>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
	USART2->CR2 |= USART_CR2_STOP_1;  // 1 stop bit
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <InitSci2+0x44>)
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <InitSci2+0x44>)
 8000b80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b84:	6113      	str	r3, [r2, #16]

	USART2->CR3 = 0;
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <InitSci2+0x44>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
		- RE = 1 (Receiver enable)
		- RXNEIE = 1 (RX not empty interrupt enable)
		- 8 data bits, no parity (M = 0, PCE = 0)
		- Oversampling 16 (OVER8 = 0)
	*/
	USART2->CR1 = (1 << 13) |  // UE
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <InitSci2+0x44>)
 8000b8e:	f242 022c 	movw	r2, #8236	@ 0x202c
 8000b92:	60da      	str	r2, [r3, #12]
				  (1 << 3)  |  // TE
				  (1 << 2)  |  // RE
				  (1 << 5);    // RXNEIE

	// Enable USART2 interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 8000b94:	2026      	movs	r0, #38	@ 0x26
 8000b96:	f7ff ff75 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <InitBufferSci2>:
}


/*Init Sci2 Buffer*/
void InitBufferSci2(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
	uint16_t count = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	80fb      	strh	r3, [r7, #6]
	for (count = 0; count < SCI_BUFFER_SIZE; count ++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	e007      	b.n	8000bc4 <InitBufferSci2+0x20>
	{
		SCI2buffer.data[count] = 0;
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <InitBufferSci2+0x54>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (count = 0; count < SCI_BUFFER_SIZE; count ++)
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bc8:	d9f4      	bls.n	8000bb4 <InitBufferSci2+0x10>
	}
	SCI2buffer.header = 0x00;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <InitBufferSci2+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f8a3 21fe 	strh.w	r2, [r3, #510]	@ 0x1fe
	SCI2buffer.index = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <InitBufferSci2+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
	SCI2buffer.checksum = 0;
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <InitBufferSci2+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
	SCI2buffer.flag = 0;
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <InitBufferSci2+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000448 	.word	0x20000448

08000bfc <USART2_ResetQueue>:
extern uint16_t tx2Buffer_tail;
extern uint16_t tx2_ready;
extern uint8_t tx2_buffer[256];

void USART2_ResetQueue(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
    USART2->CR1 &= ~USART_CR1_TXEIE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <USART2_ResetQueue+0x2c>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <USART2_ResetQueue+0x2c>)
 8000c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c0a:	60d3      	str	r3, [r2, #12]
    tx2Buffer_head = 0;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <USART2_ResetQueue+0x30>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
    tx2Buffer_tail = 0;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <USART2_ResetQueue+0x34>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	801a      	strh	r2, [r3, #0]
    tx2_ready = 0;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <USART2_ResetQueue+0x38>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	801a      	strh	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	20000774 	.word	0x20000774
 8000c30:	20000776 	.word	0x20000776
 8000c34:	20000670 	.word	0x20000670

08000c38 <USART2_Transmit>:

/* Function send packet through USART2 */
void USART2_Transmit(const uint8_t *data, uint16_t length)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
	if (tx2_ready != 0)
 8000c44:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <USART2_Transmit+0x88>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d134      	bne.n	8000cb6 <USART2_Transmit+0x7e>
	{
		return;
	}
	if (tx2_ready + length > 256)
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <USART2_Transmit+0x88>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	4413      	add	r3, r2
 8000c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c5a:	dd02      	ble.n	8000c62 <USART2_Transmit+0x2a>
    {
        USART2_ResetQueue();
 8000c5c:	f7ff ffce 	bl	8000bfc <USART2_ResetQueue>
        return;
 8000c60:	e02a      	b.n	8000cb8 <USART2_Transmit+0x80>
    }

    for (uint16_t i = 0; i < length; i++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	81fb      	strh	r3, [r7, #14]
 8000c66:	e01b      	b.n	8000ca0 <USART2_Transmit+0x68>
    {
        tx2_buffer[tx2Buffer_tail] = data[i];
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <USART2_Transmit+0x8c>)
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	7819      	ldrb	r1, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <USART2_Transmit+0x90>)
 8000c76:	5499      	strb	r1, [r3, r2]
        tx2Buffer_tail = (tx2Buffer_tail + 1) % 256;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <USART2_Transmit+0x8c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	425a      	negs	r2, r3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	bf58      	it	pl
 8000c86:	4253      	negpl	r3, r2
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <USART2_Transmit+0x8c>)
 8000c8c:	801a      	strh	r2, [r3, #0]
        tx2_ready++;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <USART2_Transmit+0x88>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <USART2_Transmit+0x88>)
 8000c98:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++)
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	81fb      	strh	r3, [r7, #14]
 8000ca0:	89fa      	ldrh	r2, [r7, #14]
 8000ca2:	887b      	ldrh	r3, [r7, #2]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3df      	bcc.n	8000c68 <USART2_Transmit+0x30>
    }

    USART2->CR1 |= USART_CR1_TXEIE;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <USART2_Transmit+0x94>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <USART2_Transmit+0x94>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb2:	60d3      	str	r3, [r2, #12]
 8000cb4:	e000      	b.n	8000cb8 <USART2_Transmit+0x80>
		return;
 8000cb6:	bf00      	nop
}
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000670 	.word	0x20000670
 8000cc4:	20000776 	.word	0x20000776
 8000cc8:	20000674 	.word	0x20000674
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <__NVIC_EnableIRQ>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <InitTimer>:
uint32_t TIM2InterruptCount;
uint32_t TIM3InterruptCount;
bool trigger_timer2;

void InitTimer()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	InitTimer2(TIMER2_PERIOD);
 8000d64:	2032      	movs	r0, #50	@ 0x32
 8000d66:	f000 f806 	bl	8000d76 <InitTimer2>
	InitTimer3(TIMER3_PERIOD);
 8000d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d6e:	f000 f83d 	bl	8000dec <InitTimer3>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <InitTimer2>:

void InitTimer2(uint32_t period)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	/*Step 1: Configure prescaler*/
	TIM2->PSC = 83; //1MHz
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d82:	2253      	movs	r2, #83	@ 0x53
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Step 2: Auto-reload register*/
	TIM2->ARR = period; //us
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/*Step 3: Configure TIMx_CR1*/
	TIM2->CR1 = 0;
 8000d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000d96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da4:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_DIR;
 8000da6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db0:	f023 0310 	bic.w	r3, r3, #16
 8000db4:	6013      	str	r3, [r2, #0]

	/*Step 4: Interrupt TIMER2*/
	TIM2->DIER |= TIM_DIER_UIE; //Start interrupt when update event happens
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM2_IRQn, 0);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	201c      	movs	r0, #28
 8000dca:	f7ff ff9f 	bl	8000d0c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000dce:	201c      	movs	r0, #28
 8000dd0:	f7ff ff7e 	bl	8000cd0 <__NVIC_EnableIRQ>

	/*Step 5: Turn on TIMER*/
	TIM2->CR1 |= TIM_CR1_CEN;
 8000dd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <InitTimer3>:

void InitTimer3(uint32_t period)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SYS_Initialize>:
 */

#include "system_config.h"

void SYS_Initialize(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	/*1. Initialize system and hardware*/
	HardwareInit();
 8000e04:	f000 f802 	bl	8000e0c <HardwareInit>
//	/*2. Initialzie the application*/
//	AppsInit();
//	/*3. Enable all interrupt*/
//	EnAllInterrupt();
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HardwareInit>:


void HardwareInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /*1. Reset of all peripherals, Initializes the Flash interface and the Systick*/
  HAL_Init();
 8000e10:	f000 fb50 	bl	80014b4 <HAL_Init>

  /*2. Configure the system clock*/
  SystemClock_Config();
 8000e14:	f000 f80c 	bl	8000e30 <SystemClock_Config>

  /*3. Initialize Hardware Interfaces*/
  InitClocks();
 8000e18:	f000 f86c 	bl	8000ef4 <InitClocks>
  InitDigitalGPIO();
 8000e1c:	f7ff fdfe 	bl	8000a1c <InitDigitalGPIO>
  InitSciGPIO();
 8000e20:	f7ff fe4e 	bl	8000ac0 <InitSciGPIO>
//  InitXintGPIO();

  /*4. Initialize all the device peripherals*/
  InitSciModules();
 8000e24:	f7ff fe92 	bl	8000b4c <InitSciModules>

  /*5. Configure TIMERs*/
  InitTimer();
 8000e28:	f7ff ff9a 	bl	8000d60 <InitTimer>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b094      	sub	sp, #80	@ 0x50
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2230      	movs	r2, #48	@ 0x30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f918 	bl	8002074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <SystemClock_Config+0xbc>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <SystemClock_Config+0xbc>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <SystemClock_Config+0xbc>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <SystemClock_Config+0xc0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <SystemClock_Config+0xc0>)
 8000e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <SystemClock_Config+0xc0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2309      	movs	r3, #9
 8000e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ea8:	23a8      	movs	r3, #168	@ 0xa8
 8000eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fc77 	bl	80017ac <HAL_RCC_OscConfig>

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1; //max 168 MHz
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  //max 42 MHz
 8000eca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ece:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  //max 84 MHz
 8000ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2105      	movs	r1, #5
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fedd 	bl	8001c9c <HAL_RCC_ClockConfig>
}
 8000ee2:	bf00      	nop
 8000ee4:	3750      	adds	r7, #80	@ 0x50
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <InitClocks>:

void InitClocks(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	/*According to Reset Clock Control registers*/
	/* GPIO Ports Clock Enable (A, C, D, E, F) */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <InitClocks+0x68>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <InitClocks+0x68>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <InitClocks+0x68>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <InitClocks+0x68>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <InitClocks+0x68>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <InitClocks+0x68>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <InitClocks+0x68>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <InitClocks+0x68>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <InitClocks+0x68>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <InitClocks+0x68>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6313      	str	r3, [r2, #48]	@ 0x30
	HAL_Delay(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 fb2f 	bl	8001598 <HAL_Delay>

	/*TIMER2, TIMER3 Clock Enable*/
	RCC->APB1ENR |= 0x00000003;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <InitClocks+0x68>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <InitClocks+0x68>)
 8000f40:	f043 0303 	orr.w	r3, r3, #3
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40

	/*USART1 Clock Enable*/
//	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <InitClocks+0x68>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <InitClocks+0x68>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40

	HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fb20 	bl	8001598 <HAL_Delay>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800

08000f60 <TIM2_IRQHandler>:
 */

#include "system_interrupt.h"

void TIM2_IRQHandler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	/*Check register TIM2_SR and Update Event flag*/
	if (TIM2->SR & TIM_SR_UIF)
 8000f64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01c      	beq.n	8000fac <TIM2_IRQHandler+0x4c>
	{
		// delete Update Event flag
		TIM2->SR &= ~TIM_SR_UIF;
 8000f72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	6113      	str	r3, [r2, #16]

		if(TIM2InterruptCount % 10000 == 0)
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <TIM2_IRQHandler+0x58>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <TIM2_IRQHandler+0x5c>)
 8000f88:	fba3 1302 	umull	r1, r3, r3, r2
 8000f8c:	0b5b      	lsrs	r3, r3, #13
 8000f8e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000f92:	fb01 f303 	mul.w	r3, r1, r3
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <TIM2_IRQHandler+0x42>
		{
			trigger_timer2 = true;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <TIM2_IRQHandler+0x60>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
		}
		TIM2InterruptCount++;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <TIM2_IRQHandler+0x58>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <TIM2_IRQHandler+0x58>)
 8000faa:	6013      	str	r3, [r2, #0]
	}
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000654 	.word	0x20000654
 8000fbc:	d1b71759 	.word	0xd1b71759
 8000fc0:	20000658 	.word	0x20000658

08000fc4 <USART1_IRQHandler>:
volatile uint16_t txBuffer_head = 0;
volatile uint16_t txBuffer_tail = 0;
double 	scic_t = 0;
double 	scic_f = 0;
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	// TXE interrupt: transmit data register is empty
	if(USART1->SR & USART_SR_TXE)
 8000fca:	4b6c      	ldr	r3, [pc, #432]	@ (800117c <USART1_IRQHandler+0x1b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d021      	beq.n	800101a <USART1_IRQHandler+0x56>
	{
		if(tx_ready == 0)
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001180 <USART1_IRQHandler+0x1bc>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d106      	bne.n	8000fee <USART1_IRQHandler+0x2a>
		{
			//No more data to send -> disable TXE interrupt
			USART1->CR1 &= ~USART_CR1_TXEIE;
 8000fe0:	4b66      	ldr	r3, [pc, #408]	@ (800117c <USART1_IRQHandler+0x1b8>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a65      	ldr	r2, [pc, #404]	@ (800117c <USART1_IRQHandler+0x1b8>)
 8000fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fea:	60d3      	str	r3, [r2, #12]
 8000fec:	e015      	b.n	800101a <USART1_IRQHandler+0x56>
		}
		else
		{
			//Send the next byte from tx_buffer
			USART1->DR = 0x02;
 8000fee:	4b63      	ldr	r3, [pc, #396]	@ (800117c <USART1_IRQHandler+0x1b8>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	605a      	str	r2, [r3, #4]
			txBuffer_head = (txBuffer_head + 1) % 256;
 8000ff4:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <USART1_IRQHandler+0x1c0>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	425a      	negs	r2, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	bf58      	it	pl
 8001004:	4253      	negpl	r3, r2
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b5e      	ldr	r3, [pc, #376]	@ (8001184 <USART1_IRQHandler+0x1c0>)
 800100a:	801a      	strh	r2, [r3, #0]
			tx_ready--;
 800100c:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <USART1_IRQHandler+0x1bc>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b5a      	ldr	r3, [pc, #360]	@ (8001180 <USART1_IRQHandler+0x1bc>)
 8001018:	701a      	strb	r2, [r3, #0]
		}
	}

	// RXNE interrupt: new data received
	if(USART1->SR & USART_SR_RXNE)
 800101a:	4b58      	ldr	r3, [pc, #352]	@ (800117c <USART1_IRQHandler+0x1b8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80a6 	beq.w	8001174 <USART1_IRQHandler+0x1b0>
	{
		SCI1buffer.value = USART1->DR;
 8001028:	4b54      	ldr	r3, [pc, #336]	@ (800117c <USART1_IRQHandler+0x1b8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001030:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		switch (SCI1buffer.state)
 8001034:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001036:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800103a:	2b02      	cmp	r3, #2
 800103c:	d05c      	beq.n	80010f8 <USART1_IRQHandler+0x134>
 800103e:	2b02      	cmp	r3, #2
 8001040:	f300 8090 	bgt.w	8001164 <USART1_IRQHandler+0x1a0>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <USART1_IRQHandler+0x8a>
 8001048:	2b01      	cmp	r3, #1
 800104a:	d019      	beq.n	8001080 <USART1_IRQHandler+0xbc>
 800104c:	e08a      	b.n	8001164 <USART1_IRQHandler+0x1a0>
		{
				case HEADER:
						if (SCI1buffer.value == 0xA6)
 800104e:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001050:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8001054:	2ba6      	cmp	r3, #166	@ 0xa6
 8001056:	f040 808a 	bne.w	800116e <USART1_IRQHandler+0x1aa>
						{
								SCI1buffer.header = SCI1buffer.value;
 800105a:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 800105c:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 8001060:	4b49      	ldr	r3, [pc, #292]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001062:	f8a3 21fe 	strh.w	r2, [r3, #510]	@ 0x1fe
								SCI1buffer.index = 0;
 8001066:	4b48      	ldr	r3, [pc, #288]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001068:	2200      	movs	r2, #0
 800106a:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
								SCI1buffer.calCS = 0;
 800106e:	4b46      	ldr	r3, [pc, #280]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001070:	2200      	movs	r2, #0
 8001072:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
								SCI1buffer.state = PAYLOAD;
 8001076:	4b44      	ldr	r3, [pc, #272]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
						}
						break;
 800107e:	e076      	b.n	800116e <USART1_IRQHandler+0x1aa>

				case PAYLOAD:
						SCI1buffer.data[SCI1buffer.index++] = SCI1buffer.value;
 8001080:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001082:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	b291      	uxth	r1, r2
 800108a:	4a3f      	ldr	r2, [pc, #252]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 800108c:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 8001090:	461a      	mov	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001094:	f8b3 1208 	ldrh.w	r1, [r3, #520]	@ 0x208
 8001098:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 800109a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						if (SCI1buffer.index >= 4)
 800109e:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010a0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d964      	bls.n	8001172 <USART1_IRQHandler+0x1ae>
						{
								SCI1buffer.calCS = SCI1buffer.header;
 80010a8:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010aa:	f8b3 21fe 	ldrh.w	r2, [r3, #510]	@ 0x1fe
 80010ae:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010b0:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
								for (int i = 0; i < 4; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	e00e      	b.n	80010d8 <USART1_IRQHandler+0x114>
								{
										SCI1buffer.calCS += SCI1buffer.data[i];
 80010ba:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010bc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80010c0:	4931      	ldr	r1, [pc, #196]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c8:	4413      	add	r3, r2
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010ce:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
								for (int i = 0; i < 4; i++)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	dded      	ble.n	80010ba <USART1_IRQHandler+0xf6>
								}
								SCI1buffer.calCS &= 0xFF;
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010e0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010ea:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
								SCI1buffer.state = CHECKSUM;
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
						}
						break;
 80010f6:	e03c      	b.n	8001172 <USART1_IRQHandler+0x1ae>

				case CHECKSUM:
						SCI1buffer.checksum = SCI1buffer.value;
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 80010fa:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001100:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
						if (SCI1buffer.checksum == SCI1buffer.calCS)
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001106:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 800110c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8001110:	429a      	cmp	r2, r3
 8001112:	d111      	bne.n	8001138 <USART1_IRQHandler+0x174>
						{
								SCI1buffer.flag = true;
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001116:	2201      	movs	r2, #1
 8001118:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
								scic_t++;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <USART1_IRQHandler+0x1c8>)
 800111e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <USART1_IRQHandler+0x1cc>)
 8001128:	f7ff f854 	bl	80001d4 <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4916      	ldr	r1, [pc, #88]	@ (800118c <USART1_IRQHandler+0x1c8>)
 8001132:	e9c1 2300 	strd	r2, r3, [r1]
 8001136:	e010      	b.n	800115a <USART1_IRQHandler+0x196>
						}
						else
						{
								SCI1buffer.flag = false;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
								scic_f++;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <USART1_IRQHandler+0x1d0>)
 8001142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <USART1_IRQHandler+0x1cc>)
 800114c:	f7ff f842 	bl	80001d4 <__adddf3>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	490f      	ldr	r1, [pc, #60]	@ (8001194 <USART1_IRQHandler+0x1d0>)
 8001156:	e9c1 2300 	strd	r2, r3, [r1]
						}
						SCI1buffer.state = HEADER;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
						break;
 8001162:	e007      	b.n	8001174 <USART1_IRQHandler+0x1b0>

				default:
						SCI1buffer.state = HEADER;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <USART1_IRQHandler+0x1c4>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
						break;
 800116c:	e002      	b.n	8001174 <USART1_IRQHandler+0x1b0>
						break;
 800116e:	bf00      	nop
 8001170:	e000      	b.n	8001174 <USART1_IRQHandler+0x1b0>
						break;
 8001172:	bf00      	nop
		}
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40011000 	.word	0x40011000
 8001180:	20000659 	.word	0x20000659
 8001184:	2000065a 	.word	0x2000065a
 8001188:	2000023c 	.word	0x2000023c
 800118c:	20000660 	.word	0x20000660
 8001190:	3ff00000 	.word	0x3ff00000
 8001194:	20000668 	.word	0x20000668

08001198 <USART2_IRQHandler>:
volatile uint16_t tx2Buffer_tail = 0;
double  scic2_t = 0;
double  scic2_f = 0;

void USART2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    // TXE interrupt: transmit data register is empty
    if (USART2->SR & USART_SR_TXE)
 800119e:	4b6f      	ldr	r3, [pc, #444]	@ (800135c <USART2_IRQHandler+0x1c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d027      	beq.n	80011fa <USART2_IRQHandler+0x62>
    {
        if (tx2_ready == 0)
 80011aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001360 <USART2_IRQHandler+0x1c8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d106      	bne.n	80011c2 <USART2_IRQHandler+0x2a>
        {
            // No more data to send -> disable TXE interrupt
            USART2->CR1 &= ~USART_CR1_TXEIE;
 80011b4:	4b69      	ldr	r3, [pc, #420]	@ (800135c <USART2_IRQHandler+0x1c4>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4a68      	ldr	r2, [pc, #416]	@ (800135c <USART2_IRQHandler+0x1c4>)
 80011ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011be:	60d3      	str	r3, [r2, #12]
 80011c0:	e01b      	b.n	80011fa <USART2_IRQHandler+0x62>
        }
        else
        {
            // Send the next byte from tx2_buffer
            USART2->DR = tx2_buffer[tx2Buffer_head];
 80011c2:	4b68      	ldr	r3, [pc, #416]	@ (8001364 <USART2_IRQHandler+0x1cc>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b67      	ldr	r3, [pc, #412]	@ (8001368 <USART2_IRQHandler+0x1d0>)
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b62      	ldr	r3, [pc, #392]	@ (800135c <USART2_IRQHandler+0x1c4>)
 80011d2:	605a      	str	r2, [r3, #4]
            tx2Buffer_head = (tx2Buffer_head + 1) % 256;
 80011d4:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <USART2_IRQHandler+0x1cc>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3301      	adds	r3, #1
 80011dc:	425a      	negs	r2, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	bf58      	it	pl
 80011e4:	4253      	negpl	r3, r2
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001364 <USART2_IRQHandler+0x1cc>)
 80011ea:	801a      	strh	r2, [r3, #0]
            tx2_ready--;
 80011ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001360 <USART2_IRQHandler+0x1c8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001360 <USART2_IRQHandler+0x1c8>)
 80011f8:	701a      	strb	r2, [r3, #0]
        }
    }

    // RXNE interrupt: new data received
    if (USART2->SR & USART_SR_RXNE)
 80011fa:	4b58      	ldr	r3, [pc, #352]	@ (800135c <USART2_IRQHandler+0x1c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80a6 	beq.w	8001354 <USART2_IRQHandler+0x1bc>
    {
        SCI2buffer.value = USART2->DR;
 8001208:	4b54      	ldr	r3, [pc, #336]	@ (800135c <USART2_IRQHandler+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b57      	ldr	r3, [pc, #348]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001210:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
        switch (SCI2buffer.state)
 8001214:	4b55      	ldr	r3, [pc, #340]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001216:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800121a:	2b02      	cmp	r3, #2
 800121c:	d05c      	beq.n	80012d8 <USART2_IRQHandler+0x140>
 800121e:	2b02      	cmp	r3, #2
 8001220:	f300 8090 	bgt.w	8001344 <USART2_IRQHandler+0x1ac>
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <USART2_IRQHandler+0x96>
 8001228:	2b01      	cmp	r3, #1
 800122a:	d019      	beq.n	8001260 <USART2_IRQHandler+0xc8>
 800122c:	e08a      	b.n	8001344 <USART2_IRQHandler+0x1ac>
        {
            case HEADER:
                if (SCI2buffer.value == 0xA6)
 800122e:	4b4f      	ldr	r3, [pc, #316]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001230:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8001234:	2ba6      	cmp	r3, #166	@ 0xa6
 8001236:	f040 808a 	bne.w	800134e <USART2_IRQHandler+0x1b6>
                {
                    SCI2buffer.header = SCI2buffer.value;
 800123a:	4b4c      	ldr	r3, [pc, #304]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800123c:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 8001240:	4b4a      	ldr	r3, [pc, #296]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001242:	f8a3 21fe 	strh.w	r2, [r3, #510]	@ 0x1fe
                    SCI2buffer.index = 0;
 8001246:	4b49      	ldr	r3, [pc, #292]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001248:	2200      	movs	r2, #0
 800124a:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
                    SCI2buffer.calCS = 0;
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001250:	2200      	movs	r2, #0
 8001252:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
                    SCI2buffer.state = PAYLOAD;
 8001256:	4b45      	ldr	r3, [pc, #276]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                }
                break;
 800125e:	e076      	b.n	800134e <USART2_IRQHandler+0x1b6>

            case PAYLOAD:
                SCI2buffer.data[SCI2buffer.index++] = SCI2buffer.value;
 8001260:	4b42      	ldr	r3, [pc, #264]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001262:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	b291      	uxth	r1, r2
 800126a:	4a40      	ldr	r2, [pc, #256]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800126c:	f8a2 1202 	strh.w	r1, [r2, #514]	@ 0x202
 8001270:	461a      	mov	r2, r3
 8001272:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001274:	f8b3 1208 	ldrh.w	r1, [r3, #520]	@ 0x208
 8001278:	4b3c      	ldr	r3, [pc, #240]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800127a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                if (SCI2buffer.index >= 4)
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001280:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001284:	2b03      	cmp	r3, #3
 8001286:	d964      	bls.n	8001352 <USART2_IRQHandler+0x1ba>
                {
                    SCI2buffer.calCS = SCI2buffer.header;
 8001288:	4b38      	ldr	r3, [pc, #224]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800128a:	f8b3 21fe 	ldrh.w	r2, [r3, #510]	@ 0x1fe
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001290:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
                    for (int i = 0; i < 4; i++)
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	e00e      	b.n	80012b8 <USART2_IRQHandler+0x120>
                    {
                        SCI2buffer.calCS += SCI2buffer.data[i];
 800129a:	4b34      	ldr	r3, [pc, #208]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800129c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80012a0:	4932      	ldr	r1, [pc, #200]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a8:	4413      	add	r3, r2
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012ae:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
                    for (int i = 0; i < 4; i++)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3301      	adds	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	dded      	ble.n	800129a <USART2_IRQHandler+0x102>
                    }
                    SCI2buffer.calCS &= 0xFF;
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012c0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b28      	ldr	r3, [pc, #160]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012ca:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
                    SCI2buffer.state = CHECKSUM;
 80012ce:	4b27      	ldr	r3, [pc, #156]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                }
                break;
 80012d6:	e03c      	b.n	8001352 <USART2_IRQHandler+0x1ba>

            case CHECKSUM:
                SCI2buffer.checksum = SCI2buffer.value;
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012da:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012e0:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
                if (SCI2buffer.checksum == SCI2buffer.calCS)
 80012e4:	4b21      	ldr	r3, [pc, #132]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012e6:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012ec:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d111      	bne.n	8001318 <USART2_IRQHandler+0x180>
                {
                    SCI2buffer.flag = true;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <USART2_IRQHandler+0x1d4>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
                    scic2_t++;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <USART2_IRQHandler+0x1d8>)
 80012fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <USART2_IRQHandler+0x1dc>)
 8001308:	f7fe ff64 	bl	80001d4 <__adddf3>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4917      	ldr	r1, [pc, #92]	@ (8001370 <USART2_IRQHandler+0x1d8>)
 8001312:	e9c1 2300 	strd	r2, r3, [r1]
 8001316:	e010      	b.n	800133a <USART2_IRQHandler+0x1a2>
                }
                else
                {
                    SCI2buffer.flag = false;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
                    scic2_f++;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <USART2_IRQHandler+0x1e0>)
 8001322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <USART2_IRQHandler+0x1dc>)
 800132c:	f7fe ff52 	bl	80001d4 <__adddf3>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4910      	ldr	r1, [pc, #64]	@ (8001378 <USART2_IRQHandler+0x1e0>)
 8001336:	e9c1 2300 	strd	r2, r3, [r1]
                }
                SCI2buffer.state = HEADER;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <USART2_IRQHandler+0x1d4>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                break;
 8001342:	e007      	b.n	8001354 <USART2_IRQHandler+0x1bc>

            default:
                SCI2buffer.state = HEADER;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <USART2_IRQHandler+0x1d4>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                break;
 800134c:	e002      	b.n	8001354 <USART2_IRQHandler+0x1bc>
                break;
 800134e:	bf00      	nop
 8001350:	e000      	b.n	8001354 <USART2_IRQHandler+0x1bc>
                break;
 8001352:	bf00      	nop
        }
    }
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400
 8001360:	20000670 	.word	0x20000670
 8001364:	20000774 	.word	0x20000774
 8001368:	20000674 	.word	0x20000674
 800136c:	20000448 	.word	0x20000448
 8001370:	20000778 	.word	0x20000778
 8001374:	3ff00000 	.word	0x3ff00000
 8001378:	20000780 	.word	0x20000780

0800137c <main>:

/*Global flag variables*/
bool isSystemReady = 1;

int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
	SYS_Initialize();
 8001380:	f7ff fd3e 	bl	8000e00 <SYS_Initialize>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
	RunSystemTasks();
 8001384:	f7ff fac8 	bl	8000918 <RunSystemTasks>
 8001388:	e7fc      	b.n	8001384 <main+0x8>
	...

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f891 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001464:	f7ff ffea 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	@ (80014ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148e:	f000 fdf9 	bl	8002084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff ff73 	bl	800137c <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014a4:	08002120 	.word	0x08002120
  ldr r2, =_sbss
 80014a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014ac:	2000078c 	.word	0x2000078c

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_Init+0x40>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_Init+0x40>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_Init+0x40>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f931 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff ff50 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f93b 	bl	8001792 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f911 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000004 	.word	0x20000004
 8001550:	2000000c 	.word	0x2000000c
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000000c 	.word	0x2000000c
 800157c:	20000788 	.word	0x20000788

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000788 	.word	0x20000788

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000000c 	.word	0x2000000c

080015e0 <__NVIC_SetPriorityGrouping>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_SetPriority>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	@ (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	@ (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff47 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff5c 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffb0 	bl	8001700 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e267      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d075      	beq.n	80018b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d00c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b85      	ldr	r3, [pc, #532]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d112      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	4b82      	ldr	r3, [pc, #520]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4b7e      	ldr	r3, [pc, #504]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d05b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x108>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d157      	bne.n	80018b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e242      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x74>
 8001812:	4b76      	ldr	r3, [pc, #472]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xb0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x98>
 800182a:	4b70      	ldr	r3, [pc, #448]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6f      	ldr	r2, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b6d      	ldr	r3, [pc, #436]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6c      	ldr	r2, [pc, #432]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xb0>
 8001844:	4b69      	ldr	r3, [pc, #420]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a68      	ldr	r2, [pc, #416]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a65      	ldr	r2, [pc, #404]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fe8c 	bl	8001580 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fe88 	bl	8001580 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	@ 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e207      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b5b      	ldr	r3, [pc, #364]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xc0>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fe78 	bl	8001580 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fe74 	bl	8001580 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	@ 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1f3      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b51      	ldr	r3, [pc, #324]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0xe8>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018c2:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b44      	ldr	r3, [pc, #272]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x152>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1c7      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3b      	ldr	r3, [pc, #236]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4937      	ldr	r1, [pc, #220]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_RCC_OscConfig+0x244>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fe2d 	bl	8001580 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fe29 	bl	8001580 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1a8      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4925      	ldr	r1, [pc, #148]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_RCC_OscConfig+0x244>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fe0c 	bl	8001580 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fe08 	bl	8001580 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e187      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d036      	beq.n	8001a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_RCC_OscConfig+0x248>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fdec 	bl	8001580 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fde8 	bl	8001580 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e167      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x200>
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_OscConfig+0x248>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fdd5 	bl	8001580 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e00e      	b.n	80019f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fdd1 	bl	8001580 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d907      	bls.n	80019f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e150      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	42470000 	.word	0x42470000
 80019f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	4b88      	ldr	r3, [pc, #544]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ea      	bne.n	80019da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8097 	beq.w	8001b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b81      	ldr	r3, [pc, #516]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b7d      	ldr	r3, [pc, #500]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b7a      	ldr	r3, [pc, #488]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b77      	ldr	r3, [pc, #476]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b74      	ldr	r3, [pc, #464]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a73      	ldr	r2, [pc, #460]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fd91 	bl	8001580 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff fd8d 	bl	8001580 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e10c      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2ea>
 8001a88:	4b64      	ldr	r3, [pc, #400]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8c:	4a63      	ldr	r2, [pc, #396]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a94:	e01c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x324>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x30c>
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aae:	4a5b      	ldr	r2, [pc, #364]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x324>
 8001ab8:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac4:	4b55      	ldr	r3, [pc, #340]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac8:	4a54      	ldr	r2, [pc, #336]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fd52 	bl	8001580 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fd4e 	bl	8001580 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0cb      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	4b49      	ldr	r3, [pc, #292]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0ee      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x334>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fd3c 	bl	8001580 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fd38 	bl	8001580 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0b5      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a1 	beq.w	8001c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4a:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d05c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d141      	bne.n	8001be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_RCC_OscConfig+0x478>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fd0c 	bl	8001580 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff fd08 	bl	8001580 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e087      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCC_OscConfig+0x478>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fce1 	bl	8001580 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff fcdd 	bl	8001580 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e05c      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x416>
 8001be0:	e054      	b.n	8001c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_RCC_OscConfig+0x478>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fcca 	bl	8001580 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff fcc6 	bl	8001580 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e045      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x444>
 8001c0e:	e03d      	b.n	8001c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e038      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000
 8001c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <HAL_RCC_OscConfig+0x4ec>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d028      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d121      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d11a      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	3b01      	subs	r3, #1
 8001c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0cc      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b68      	ldr	r3, [pc, #416]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d90c      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b65      	ldr	r3, [pc, #404]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b59      	ldr	r3, [pc, #356]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d08:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b50      	ldr	r3, [pc, #320]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	494d      	ldr	r1, [pc, #308]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d044      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d119      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e06f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e067      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4934      	ldr	r1, [pc, #208]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff fbf8 	bl	8001580 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff fbf4 	bl	8001580 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e04f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 020c 	and.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1eb      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d20c      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e032      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4916      	ldr	r1, [pc, #88]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	490e      	ldr	r1, [pc, #56]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e22:	f000 f821 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	490a      	ldr	r1, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb58 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023c00 	.word	0x40023c00
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08002100 	.word	0x08002100
 8001e60:	20000004 	.word	0x20000004
 8001e64:	20000008 	.word	0x20000008

08001e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e6c:	b094      	sub	sp, #80	@ 0x50
 8001e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e80:	4b79      	ldr	r3, [pc, #484]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	f200 80e1 	bhi.w	8002054 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x34>
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e9a:	e0db      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b73      	ldr	r3, [pc, #460]	@ (800206c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ea0:	e0db      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ea2:	4b73      	ldr	r3, [pc, #460]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ea6:	e0d8      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001eb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d063      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001eda:	4622      	mov	r2, r4
 8001edc:	462b      	mov	r3, r5
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	0159      	lsls	r1, r3, #5
 8001ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eec:	0150      	lsls	r0, r2, #5
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	1a51      	subs	r1, r2, r1
 8001ef6:	6139      	str	r1, [r7, #16]
 8001ef8:	4629      	mov	r1, r5
 8001efa:	eb63 0301 	sbc.w	r3, r3, r1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f0c:	4659      	mov	r1, fp
 8001f0e:	018b      	lsls	r3, r1, #6
 8001f10:	4651      	mov	r1, sl
 8001f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f16:	4651      	mov	r1, sl
 8001f18:	018a      	lsls	r2, r1, #6
 8001f1a:	4651      	mov	r1, sl
 8001f1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001f20:	4659      	mov	r1, fp
 8001f22:	eb63 0901 	sbc.w	r9, r3, r1
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f3a:	4690      	mov	r8, r2
 8001f3c:	4699      	mov	r9, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	eb18 0303 	adds.w	r3, r8, r3
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	462b      	mov	r3, r5
 8001f48:	eb49 0303 	adc.w	r3, r9, r3
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	024b      	lsls	r3, r1, #9
 8001f5e:	4621      	mov	r1, r4
 8001f60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f64:	4621      	mov	r1, r4
 8001f66:	024a      	lsls	r2, r1, #9
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f78:	f7fe fae2 	bl	8000540 <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f84:	e058      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	4611      	mov	r1, r2
 8001f92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	0159      	lsls	r1, r3, #5
 8001fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb2:	0150      	lsls	r0, r2, #5
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4641      	mov	r1, r8
 8001fba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001fdc:	eb63 050b 	sbc.w	r5, r3, fp
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	00eb      	lsls	r3, r5, #3
 8001fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fee:	00e2      	lsls	r2, r4, #3
 8001ff0:	4614      	mov	r4, r2
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	4643      	mov	r3, r8
 8001ff6:	18e3      	adds	r3, r4, r3
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	eb45 0303 	adc.w	r3, r5, r3
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800200e:	4629      	mov	r1, r5
 8002010:	028b      	lsls	r3, r1, #10
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002018:	4621      	mov	r1, r4
 800201a:	028a      	lsls	r2, r1, #10
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002022:	2200      	movs	r2, #0
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	61fa      	str	r2, [r7, #28]
 8002028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202c:	f7fe fa88 	bl	8000540 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x200>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800204a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_RCC_GetSysClockFreq+0x204>)
 8002056:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800205c:	4618      	mov	r0, r3
 800205e:	3750      	adds	r7, #80	@ 0x50
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400
 8002070:	007a1200 	.word	0x007a1200

08002074 <memset>:
 8002074:	4402      	add	r2, r0
 8002076:	4603      	mov	r3, r0
 8002078:	4293      	cmp	r3, r2
 800207a:	d100      	bne.n	800207e <memset+0xa>
 800207c:	4770      	bx	lr
 800207e:	f803 1b01 	strb.w	r1, [r3], #1
 8002082:	e7f9      	b.n	8002078 <memset+0x4>

08002084 <__libc_init_array>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	4d0d      	ldr	r5, [pc, #52]	@ (80020bc <__libc_init_array+0x38>)
 8002088:	4c0d      	ldr	r4, [pc, #52]	@ (80020c0 <__libc_init_array+0x3c>)
 800208a:	1b64      	subs	r4, r4, r5
 800208c:	10a4      	asrs	r4, r4, #2
 800208e:	2600      	movs	r6, #0
 8002090:	42a6      	cmp	r6, r4
 8002092:	d109      	bne.n	80020a8 <__libc_init_array+0x24>
 8002094:	4d0b      	ldr	r5, [pc, #44]	@ (80020c4 <__libc_init_array+0x40>)
 8002096:	4c0c      	ldr	r4, [pc, #48]	@ (80020c8 <__libc_init_array+0x44>)
 8002098:	f000 f826 	bl	80020e8 <_init>
 800209c:	1b64      	subs	r4, r4, r5
 800209e:	10a4      	asrs	r4, r4, #2
 80020a0:	2600      	movs	r6, #0
 80020a2:	42a6      	cmp	r6, r4
 80020a4:	d105      	bne.n	80020b2 <__libc_init_array+0x2e>
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ac:	4798      	blx	r3
 80020ae:	3601      	adds	r6, #1
 80020b0:	e7ee      	b.n	8002090 <__libc_init_array+0xc>
 80020b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b6:	4798      	blx	r3
 80020b8:	3601      	adds	r6, #1
 80020ba:	e7f2      	b.n	80020a2 <__libc_init_array+0x1e>
 80020bc:	08002118 	.word	0x08002118
 80020c0:	08002118 	.word	0x08002118
 80020c4:	08002118 	.word	0x08002118
 80020c8:	0800211c 	.word	0x0800211c

080020cc <memcpy>:
 80020cc:	440a      	add	r2, r1
 80020ce:	4291      	cmp	r1, r2
 80020d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80020d4:	d100      	bne.n	80020d8 <memcpy+0xc>
 80020d6:	4770      	bx	lr
 80020d8:	b510      	push	{r4, lr}
 80020da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020e2:	4291      	cmp	r1, r2
 80020e4:	d1f9      	bne.n	80020da <memcpy+0xe>
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
